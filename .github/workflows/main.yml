name: Main Foodgram workflow

on:
  push:
    branches:
      - master

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: foodgram_user
          POSTGRES_PASSWORD: foodgram_password
          POSTGRES_DB: foodgram
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r requirements.txt
      - name: Test with flake8 and django tests
        env:
          POSTGRES_USER: foodgram_user
          POSTGRES_PASSWORD: foodgram_password
          POSTGRES_DB: foodgram
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          python -m flake8 backend/
          cd backend/
          python manage.py test

  make_folders_and_copy_files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up SSH connection
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: <REMOTE_HOST>
          username: <USERNAME>
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}

      - name: Create Directories
        run: |
            ssh ${{ secrets.USER }}@${{ secrets.HOST }} "mkdir -p foodgram/docs"
            ssh ${{ secrets.USER }}@${{ secrets.HOST }} "mkdir -p foodgram/infra"

      - name: Copy Docs
        run: scp -r ./foodgram-project-react/docs/* ${{ secrets.USER }}@${{ secrets.HOST }}:/home/${{ secrets.USER }}/foodgram/docs

      - name: Copy Infra
        run: scp -r ./foodgram-project-react/infra/* ${{ secrets.USER }}@${{ secrets.HOST }}:/home/${{ secrets.USER }}/foodgram

#   build:
#     name: Build
#     runs-on: ubuntu-latest
#     steps:
#     - name: executing remote ssh commands using password
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ secrets.HOST }}
#         username: ${{ secrets.USER }}
#         key: ${{ secrets.SSH_KEY }}
#         port: ${{ secrets.PORT }}
#         passphrase: ${{ secrets.SSH_PASSPHRASE }}
#         script: |
#           mkdir -p foodgram
#           mkdir -p foodgram/docs

#   copy_folder_content_recursively_to_remote:
#     name: Copy infra and docs
#     runs-on: ubuntu-latest
#     steps:
#       - name: checkout
#         uses: actions/checkout@v2
#       - name: create foodgram directory
#         uses: garygrossgarten/github-action-ssh@release
#         with:
#           command: mkdir -p foodgram && mkdir -p foodgram/docs
#           host: ${{ secrets.HOST }}
#           username: ${{ secrets.USER }}
#           passphrase: ${{ secrets.SSH_PASSPHRASE }}
#           privateKey: ${{ secrets.SSH_KEY }}
#         env:
#           CI: true

#       - name: copy infra
#         uses: garygrossgarten/github-action-scp@release
#         with:
#           local: infra/
#           remote: /${{ secrets.USER }}/foodgram
#           host: ${{ secrets.HOST }}
#           username: ${{ secrets.USER }}
#           privateKey: ${{ secrets.SSH_KEY }}
#       - name: copy docs
#         uses: garygrossgarten/github-action-scp@release
#         with:
#           local: docs/
#           remote: /${{ secrets.USER }}/foodgram/docs
#           host: ${{ secrets.HOST }}
#           username: ${{ secrets.USER }}
#           privateKey: ${{ secrets.SSH_KEY }}

  build_backend_and_push_to_docker_hub:
    name: push backend image
    runs-on: ubuntu-latest
    needs:
      - tests
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.USER }}
          password: ${{ secrets.SSH_PASSPHRASE }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v2
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

  frontend_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up nodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: |
          cd frontend/
          npm ci
      - name: Install dependencies
        run: |
          cd frontend/
          npm run test

  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.USER }}
          password: ${{ secrets.SSH_PASSPHRASE }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - make_folders_and_copy_files
      - build_backend_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Executing remote ssh commands to deploy
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          privateKey: ${{ secrets.SSH_KEY }}
          script: |
            cd foodgram/
            rm -f .env
            touch .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker image prune -a
            sudo docker-compose stop
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/foodgram_backend
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend
            sudo docker-compose up -d

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: Деплой foodgram успешно выполнен!
